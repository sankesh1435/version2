Understand the Problem:
Before diving into the code, make sure you fully understand the problem and have a clear
idea of how the algorithm works. Prim's algorithm finds the minimum spanning tree in a weighted,
connected graph, where each vertex represents a location and the edges represent the cost of connecting them.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 20 // Define a maximum number of vertices

int minKey(int key[], int mstSet[], int V) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

void primMST(int graph[MAX_VERTICES][MAX_VERTICES], int V) {
    int parent[MAX_VERTICES];
    int key[MAX_VERTICES];
    int mstSet[MAX_VERTICES];

    for (int i = 0; i < V; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < V - 1; count++) {
        int u = minKey(key, mstSet, V);
        mstSet[u] = 1;

        for (int v = 0; v < V; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printf("Edge   Weight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d    %d\n", parent[i], i, graph[i][parent[i]]);
    }
}

int main() {
    int V;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);

    int graph[MAX_VERTICES][MAX_VERTICES];

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    primMST(graph, V);

    return 0;
}
output:
nter the number of vertices: 4
Enter the adjacency matrix:
0 1 3 0 
1 0 2 4
3 2 0 5 
0 4 5 0
Edge   Weight
0 - 1    1
1 - 2    2
1 - 3    4
he program starts by including necessary header files and defining some constants.
minKey is a function that finds the vertex with the minimum key value among the vertices that are not yet included 
in the MST.
primMST is the main function responsible for finding and printing the MST. 
It initializes data structures such as key, parent, and mstSet.
Inside the primMST function, the algorithm iteratively selects vertices to include in the MST until all
vertices are included. It starts with the first vertex (vertex 0) and repeatedly selects the vertex
with the minimum key value that is not yet in the MST. It then updates the key values and parent 
information for adjacent vertices.
Finally, the program prints the edges and their weights in the MST, displaying the optimal 
connections for infrastructure development.
In the main function, the user is prompted to enter the number of vertices and the adjacency matrix
representing the graph.
The primMST function is called with the provided graph and the number of vertices,
which calculates and prints the MST.
